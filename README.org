* Goal

The purpose of this Lisp package is to bring the power of Common Lisp
macros to swift development.

This is the ninth in a series of code generators. Originally I
intended to write an iOS App but lost interest very fast because I
didn't have any hardware. Now (April 2020) I became more interested in
Swift4Tensorflow and Jeremy Howards fast.ai work.


- https://github.com/plops/cl-cpp-generator I tried this generator
  with C/C++/ISPC/OpenCL/Cuda. It was my first attempt. The largest
  project with this is a firmware for a microcontroller. The difficult
  part is to get placement of semicolons right. I'm not terribly happy
  with the current solution. People don't like that every function
  call has to be explicitly stated as such. Initially I thought it
  would help me to add function parameter completion in emacs. But I
  never figured out how to do that and in later code generators I
  simplified the lisp syntax.

- https://github.com/plops/cl-ada-generator (abandoned) I always
  wanted to have a VHDL code generator and thought that ADA would be a
  good target to support a similar language. Unfortunately ADA and
  VHDL have a lot of syntactic constructs which I find difficult to
  express in Lisp semantics that I can remember. So I stopped working
  in this direction.

- https://github.com/plops/cl-py-generator At a new job I generated
  LOTS of python code (75k lines) with this generator. The difficult
  part was to get indents right. It works really well. I should
  backport some features from cl-golang-generator: Variable type
  declaration, when, unless, unitary - and unitary /, logior, logand,
  incf, decf.

- https://github.com/plops/cl-js-generator I played around with webrtc
  and webgl in the browser.  I used parenscript before and I really
  like the way it upholds lisp semantics (every expression returns a
  value). However, the generated javascript can be difficult to read
  (and compare to s-expressions). For this project my goal was to have
  a very minimal mapping from s-expressions to javascript. Turns out
  converting lisp to javascript is very straightforward.

- https://github.com/plops/cl-wolfram-generator (abandoned) At some
  point I was able to download a wolfram language license. I think
  this language is very close to Lisp. I tried some code generation
  but the free license would only work on one computer which is not
  how I work.

- https://github.com/plops/cl-yasm-golang (abandoned for now, FIXME I
  accidentally called this golang and not generator). I was playing
  with the idea to program bare to the metal with either LLVM IR or
  amd64 assembly. Some prototyping indicated that this has extra
  challenges that can't be easily addressed in my
  'single-function-code-generator' approach. These are distributing
  variables on registers, memory handling. Also I'm not sure how much
  or if I could immediatly profit from existing tooling if I dump
  assembly or machine code.

- https://github.com/plops/cl-golang-generator I used this to learn a
  bit of Go.  I implemented quite a few examples of the Golang
  Programming book. In particular I like how straight forward it was
  to add common lisp type declarations. I'm very happy with how this
  experiment turned out. Golang is an expressive, simple
  language. Implementing the code generator was much faster than my C
  generator (because I don't have to think about
  semicolons). Distributing the binaries is much easier than Python
  code. They are however so large (>20Mb) that I wonder if writing
  Common Lisp directly wouldn't be the better approach.

- https://github.com/plops/cl-cpp-generator2 Second version of the C
  code generator with semantics that match Common Lisp more closely
  (function calls, type declarations).

- https://github.com/plops/cl-rust-generator (working quite well). I
  wrote a few small examples with rust. The ecosystem seems a bit
  unstable right now.


* Install swift in Arch Linux

#+BEGIN_EXAMPLE
aurman -S swift-bin
#+END_EXAMPLE
  
* Install swift in Gentoo
https://github.com/tensorflow/swift/blob/master/Installation.md
   - 'swift build' doesnt work with this

https://swift.org/builds/swift-5.2.1-release/ubuntu1604/swift-5.2.1-RELEASE/swift-5.2.1-RELEASE-ubuntu16.04.tar.gz
   - 'swift build' works

* Build swift tensorflow from source (on gentoo)

https://github.com/apple/swift/blob/tensorflow/README.md

- up to 70 GB of disk space for the build artifacts with full debugging

#+begin_example
sudo emerge bazel # needs java :-(
cd /media/sdb4/swift-source
git clone https://github.com/apple/swift.git -b tensorflow
./swift/utils/update-checkout --clone --scheme tensorflow
# folder is now 4.1GB
swift/utils/build-script -j 12 --enable-tensorflow --release
# folder is now 9.5GB
cd swift
time utils/build-script --preset=tensorflow_test --release
export BUNDLE_PREFIX=com.example
export PATH=/media/sdb4/swift-source/build/Ninja-ReleaseAssert/llvm-linux-x86_64/bin/:$PATH
export SWIFT_BUILD_DIR="/media/sdb4/swift-source/build/Ninja-ReleaseAssert/swift-linux-x86_64/"
./swift/utils/build-toolchain-tensorflow $BUNDLE_PREFIX --gpu

#+end_example

* Swiftai

https://github.com/fastai/swiftai 

* Package
  #+begin_example
swift package init --type=executable
  #+end_example

* Code formatter
  #+begin_example 
  cd ~/src
  git clone https://github.com/apple/swift-format
  cd swift-format
  swift build -v -c release  -j 12
  #+end_example

* Examples

|    | comment            |
|----+--------------------|
| 01 | tensorflow example |
|    |                    |

* Developing the first example 



* References

- swift tensorflow
   - https://github.com/fastai/course-v3/blob/master/nbs/swift/00_load_data.ipynb machine learning in swift
   - https://github.com/fastai/course-v3/blob/master/nbs/dl2/02_fully_connected.ipynb


* References (Library Books)

** Learning Swift
 
